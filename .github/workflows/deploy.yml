# GitHub Actions 工作流程的名稱
name: Deploy to Firebase Hosting (Debug Mode)

# 觸發條件：當有程式碼被 push 到 main 分支時
on:
  push:
    branches:
      - main

# 工作內容
jobs:
  build_and_deploy_debug:
    # 運行的虛擬機環境
    runs-on: ubuntu-latest

    # 工作的步驟
    steps:
      # 步驟 1: 下載您的程式碼
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步驟 2: 設定 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10

      # 步驟 3: 設定 Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      # 步驟 4: 安裝依賴套件
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # 步驟 5: 打包建置專案
      - name: Build Project
        run: pnpm build

      # 【新增】步驟 6: 全域安裝 Firebase CLI
      - name: Install Firebase CLI
        run: pnpm add -g firebase-tools

      # 【修改】步驟 7: 手動執行部署並開啟除錯模式
      - name: Deploy to Firebase with Debug Output
        env:
          # 將我們存在 GitHub Secrets 的金鑰內容，寫入一個環境變數
          FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          # 步驟 7.1: 將環境變數中的 JSON 金鑰內容，寫入一個暫存檔案
          echo "$FIREBASE_SERVICE_ACCOUNT_JSON" > ./gcp-sa-key.json

          # 步驟 7.2: 設定 Google Cloud 的憑證環境變數，讓它指向我們剛建立的金鑰檔案
          export GOOGLE_APPLICATION_CREDENTIALS=./gcp-sa-key.json

          # 步驟 7.3: 執行部署指令，並加上 --debug 參數
          firebase deploy --only hosting --project babix-web-app --debug